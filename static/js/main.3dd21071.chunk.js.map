{"version":3,"sources":["assets/fonts/digital-7.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","accurateInterval","require","TimerLengthControl","className","id","this","props","titleID","title","addID","value","onClick","lengthID","length","minID","React","Component","Timer","state","timer","breakLength","sessionLength","timerState","timerType","intervalID","alarmColor","color","clockify","bind","timerControl","beginCountDown","phaseControl","decrementTimer","warning","buzzer","reset","switchTimer","setBrkLength","setSeshLength","lengthControl","stateToChange","sign","currentLength","setState","e","currentTarget","clear","_timer","audioBeep","play","minutes","Math","floor","seconds","num","str","pause","currentTime","format","ticking","timezone","style","preload","src","ref","audio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3dd21071.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/digital-7.1e670d88.ttf\";","/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport Clock from 'react-live-clock';\n\nconst accurateInterval = require('accurate-interval');\n\n\nclass TimerLengthControl extends React.Component {\n    render() {\n        return (\n            <div className=\"length-control\">\n                <div id={this.props.titleID}>\n                    {this.props.title}\n                </div>\n                <button id={this.props.addID}\n                        className=\"btn-level\" value=\"+\"\n                        onClick={this.props.onClick}>\n                    <i className=\"fa fa-arrow-up fa-2x\"/>\n                </button>\n                <div id={this.props.lengthID} className=\"btn-level\">\n                    {this.props.length}\n                </div>\n                <button id={this.props.minID}\n                        className=\"btn-level\" value=\"-\"\n                        onClick={this.props.onClick}>\n                    <i className=\"fa fa-arrow-down fa-2x\"/>\n                </button>\n\n            </div>\n        )\n    }\n};\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 1500,\n            breakLength: 5,\n            sessionLength: 25,\n            timerState: 'stopped',\n            timerType: 'Session',\n            intervalID: '',\n            alarmColor: {color: 'white'}\n        };\n        this.clockify = this.clockify.bind(this);\n        this.timerControl = this.timerControl.bind(this);\n        this.beginCountDown = this.beginCountDown.bind(this);\n        this.phaseControl = this.phaseControl.bind(this);\n        this.decrementTimer = this.decrementTimer.bind(this);\n        this.warning = this.warning.bind(this);\n        this.buzzer = this.buzzer.bind(this);\n        this.reset = this.reset.bind(this);\n        this.switchTimer = this.switchTimer.bind(this);\n        this.setBrkLength = this.setBrkLength.bind(this);\n        this.setSeshLength = this.setSeshLength.bind(this);\n        this.lengthControl = this.lengthControl.bind(this);\n    }\n\n    lengthControl(stateToChange, sign, currentLength, timerType) {\n        if (this.state.timerState === 'running') return;\n        if (this.state.timerType === timerType) {\n            if (sign === \"-\" && currentLength !== 1) {\n                this.setState({[stateToChange]: currentLength - 1});\n            } else if (sign === \"+\" && currentLength !== 60) {\n                this.setState({[stateToChange]: currentLength + 1});\n            }\n        } else {\n            if (sign === \"-\" && currentLength !== 1) {\n                this.setState({\n                    [stateToChange]: currentLength - 1,\n                    timer: currentLength * 60 - 60\n                });\n            } else if (sign === \"+\" && currentLength !== 60) {\n                this.setState({\n                    [stateToChange]: currentLength + 1,\n                    timer: currentLength * 60 + 60\n                });\n            }\n        }\n    }\n\n    beginCountDown() {\n        this.setState({\n            intervalID: accurateInterval(() => {\n                this.decrementTimer();\n                this.phaseControl();\n            }, 1000)\n        })\n    }\n\n    setBrkLength(e) {\n        this.lengthControl('breakLength', e.currentTarget.value,\n            this.state.breakLength, 'Session');\n    }\n\n    setSeshLength(e) {\n        this.lengthControl('sessionLength', e.currentTarget.value,\n            this.state.sessionLength, 'Break');\n    }\n\n    decrementTimer() {\n        this.setState({timer: this.state.timer - 1});\n    }\n\n    phaseControl() {\n        let timer = this.state.timer;\n        this.warning(timer);\n        this.buzzer(timer);\n        if (timer < 0) {\n            this.state.timerType === 'Session' ? (\n                this.state.intervalID && this.state.intervalID.clear(),\n                    this.beginCountDown(),\n                    this.switchTimer(this.state.breakLength * 60, 'Break')\n            ) : (\n                this.state.intervalID && this.state.intervalID.clear(),\n                    this.beginCountDown(),\n                    this.switchTimer(this.state.sessionLength * 60, 'Session')\n            );\n        }\n    }\n\n    warning(_timer) {\n        _timer < 61 ?\n            this.setState({alarmColor: {color: 'blue'}}) :\n            this.setState({alarmColor: {color: 'white'}});\n    }\n\n    buzzer(_timer) {\n        if (_timer === 0) {\n            this.audioBeep.play();\n        }\n    }\n\n    timerControl() {\n        if (this.state.timerState === 'stopped') {\n            this.beginCountDown();\n            this.setState({timerState: 'running'})\n        } else {\n            this.setState({timerState: 'stopped'});\n            this.state.intervalID && this.state.intervalID.clear()\n        }\n    }\n\n    clockify() {\n        let minutes = Math.floor(this.state.timer / 60);\n        let seconds = this.state.timer - minutes * 60;\n        seconds = seconds < 10 ? '0' + seconds : seconds;\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        return minutes + ':' + seconds;\n    }\n\n    switchTimer(num, str) {\n        this.setState({\n            timer: num,\n            timerType: str,\n            alarmColor: {color: 'white'}\n        })\n    }\n\n    reset() {\n        this.setState({\n            breakLength: 5,\n            sessionLength: 25,\n            timerState: 'stopped',\n            timerType: 'Session',\n            timer: 1500,\n            intervalID: '',\n            alarmColor: {color: 'white'}\n        });\n        this.state.intervalID && this.state.intervalID.clear();\n        this.audioBeep.pause();\n        this.audioBeep.currentTime = 0;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>Current Time</div>\n                <div id=\"current-time\" className=\"clock-face\"><Clock format={'HH:mm:ss'} ticking={true}\n                                                                     timezone={'US/Eastern'}/></div>\n                <div id=\"main-display\">\n                    <div id=\"crunc-supreme-wrapper\">\n                    <div id=\"time-label\" style={this.state.alarmColor}>\n                        <h1>\n                        {this.state.timerType}\n                        </h1>\n                    </div>\n\n                    <div id=\"timer-wrapper\">\n                        <div id=\"break-label\">\n                            <TimerLengthControl\n                                titleID=\"break-label\" minID=\"break-decrement\"\n                                addID=\"break-increment\" lengthID=\"break-length\"\n                                title=\"Break Length\" onClick={this.setBrkLength}\n                                length={this.state.breakLength}/>\n                        </div>\n                        <div id=\"time-left\" className=\"clock-face\">\n                            {this.clockify()}\n                        </div>\n                        <TimerLengthControl\n                            titleID=\"session-label\" minID=\"session-decrement\"\n                            addID=\"session-increment\" lengthID=\"session-length\"\n                            title=\"Session Length\" onClick={this.setSeshLength}\n                            length={this.state.sessionLength}/>\n\n                        <audio id=\"beep\" preload=\"auto\"\n                               src=\"https://goo.gl/65cBl1\"\n                               ref={(audio) => {\n                                   this.audioBeep = audio;\n                               }}/>\n                    </div>\n                    <div id=\"timer-control\">\n                        <button id=\"start_stop\" onClick={this.timerControl}>\n\n                            <i className=\"fa fa-play fa-2x\"/>\n                            <i className=\"fa fa-pause fa-2x\"/>\n                        </button>\n                        <button id=\"reset\" onClick={this.reset}>\n                            <i className=\"fa fa-refresh fa-2x\"/>\n                        </button>\n                    </div>\n                </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Timer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/fonts/digital-7.ttf';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}